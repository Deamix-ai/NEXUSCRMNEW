// This is your Prisma schema file for CRM-Nexus
// Client-centric container architecture

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE CRM ENTITIES - CLIENT-CENTRIC ARCHITECTURE
// ============================================================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String?
  firstName         String
  lastName          String
  phone             String?
  role              UserRole @default(SALES)
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  emailVerifiedAt   DateTime?
  twoFactorSecret   String?
  twoFactorEnabled  Boolean  @default(false)
  avatarUrl         String?
  timezone          String   @default("Europe/London")
  preferences       Json     @default("{}")
  
  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdById       String?
  updatedById       String?
  
  // Relations
  createdBy         User?     @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedBy         User?     @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  createdUsers      User[]    @relation("UserCreatedBy")
  updatedUsers      User[]    @relation("UserUpdatedBy")
  
  ownedClients      Client[]  @relation("ClientOwner")
  ownedRooms        Room[]    @relation("RoomOwner")
  ownedDeals        Deal[]    @relation("DealOwner")
  assignedTasks     Task[]    @relation("TaskAssignee")
  activities        Activity[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  SALES
  DESIGNER
  INSTALLER
  FINANCE
}

// CLIENT AS CONTAINER - TOP LEVEL RECORD
model Client {
  id               String       @id @default(cuid())
  orgId            String?      // tenant-ready for multi-location
  name             String
  legalName        String?
  emails           String[]     // primary goes in Contacts; array for search aid
  phones           String[]
  billingAddress   Json?
  siteAddresses    Json?        // optional multiple sites
  ownerId          String
  owner            User         @relation("ClientOwner", fields: [ownerId], references: [id])
  tags             String[]
  status           ClientStatus @default(ACTIVE)
  portalToken      String       @unique @default(cuid())
  designFeePaid    Boolean      @default(false)
  consentMarketing Boolean      @default(false)

  // All child entities live inside client
  contacts         Contact[]
  rooms            Room[]       // Projects under this client
  deals            Deal[]
  activities       Activity[]
  tasks            Task[]
  appointments     Appointment[]
  documents        Document[]
  snags            Snag[]
  jobs             Job[]
  events           EventLog[]

  // Audit fields
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?    // soft delete
  createdById      String?
  updatedById      String?

  @@index([name])
  @@index([ownerId])
  @@index([status])
  @@index([portalToken])
  @@map("clients")
}

enum ClientStatus { 
  ACTIVE 
  ARCHIVED 
}

model Contact {
  id        String   @id @default(cuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  name      String
  role      String?
  email     String?
  phone     String?
  isPrimary Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([email])
  @@index([phone])
  @@map("contacts")
}

// PROJECT/ROOM - SCOPED WORKSPACE UNDER CLIENT
model Room {
  id              String     @id @default(cuid())
  clientId        String
  client          Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  type            RoomType
  nickname        String
  pipelineStageId String?
  stage           PipelineStage? @relation(fields: [pipelineStageId], references: [id])
  ownerId         String?
  owner           User?      @relation("RoomOwner", fields: [ownerId], references: [id])
  budgetLow       Int?
  budgetHigh      Int?
  siteAddress     Json?
  status          RoomStatus @default(ACTIVE)

  // All project work scoped to room
  deal            Deal?
  activities      Activity[]
  tasks           Task[]
  appointments    Appointment[]
  documents       Document[]
  designVersions  DesignVersion[]
  parsedSpecItems ParsedSpecItem[]
  forms           FormSubmission[]
  jobs            Job[]
  snags           Snag[]

  // Audit fields
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  deletedAt       DateTime?  // soft delete

  @@index([clientId])
  @@index([status])
  @@index([pipelineStageId])
  @@map("rooms")
}

enum RoomType { 
  KITCHEN 
  BATHROOM 
  CLOAKROOM 
  OTHER 
}

enum RoomStatus { 
  ACTIVE 
  WON 
  LOST 
  ONHOLD 
  COMPLETED 
}

model Deal {
  id                String @id @default(cuid())
  clientId          String
  client            Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roomId            String? @unique
  room              Room?  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  stageId           String
  stage             PipelineStage @relation("DealStage", fields: [stageId], references: [id])
  ownerId           String
  owner             User   @relation("DealOwner", fields: [ownerId], references: [id])
  amountGrossIncVat Int
  vatRate           Float  @default(0.2)
  probability       Int    @default(50)
  source            String?
  utm               Json?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([clientId])
  @@index([roomId])
  @@index([stageId])
  @@index([ownerId])
  @@map("deals")
}

model PipelineStage {
  id       String @id @default(cuid())
  name     String
  order    Int
  slaHours Int?
  
  rooms    Room[]
  deals    Deal[] @relation("DealStage")

  @@map("pipeline_stages")
}

model Activity {
  id          String       @id @default(cuid())
  clientId    String
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roomId      String?
  room        Room?        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?        @relation(fields: [userId], references: [id])
  type        ActivityType
  threadKey   String?      // for conversation threading
  summary     String?
  body        String?
  attachments Json?
  durations   Json?
  metadata    Json?
  occurredAt  DateTime     @default(now())
  createdAt   DateTime     @default(now())

  @@index([clientId, occurredAt])
  @@index([roomId, occurredAt])
  @@index([threadKey])
  @@map("activities")
}

enum ActivityType { 
  NOTE 
  CALL 
  EMAIL 
  SMS 
  MEETING 
  VOICEMAIL 
  SIGNATURE 
  UPLOAD 
  FORM 
  SYSTEM 
}

model Task {
  id            String     @id @default(cuid())
  clientId      String
  client        Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roomId        String?
  room          Room?      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  assigneeId    String?
  assignee      User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  title         String
  dueAt         DateTime?
  priority      Int        @default(0)
  status        TaskStatus @default(OPEN)
  autoGenerated Boolean    @default(false)
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([clientId])
  @@index([roomId])
  @@index([assigneeId])
  @@index([status, dueAt])
  @@map("tasks")
}

enum TaskStatus { 
  OPEN 
  DONE 
  CANCELLED 
}

model Appointment {
  id           String          @id @default(cuid())
  clientId     String
  client       Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roomId       String?
  room         Room?           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  type         AppointmentType
  start        DateTime
  end          DateTime
  location     String?
  participants Json?
  status       String?
  
  createdAt    DateTime        @default(now())

  @@index([clientId, start])
  @@index([roomId, start])
  @@map("appointments")
}

enum AppointmentType { 
  CONSULT 
  SURVEY 
  PRESENTATION 
  INSTALL 
  AFTERCARE 
}

model Document {
  id              String      @id @default(cuid())
  clientId        String
  client          Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roomId          String?
  room            Room?       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  category        DocCategory
  url             String
  thumbUrl        String?
  size            Int?
  labels          String[]
  capturedAt      DateTime?
  capturedBy      String?
  clientVisible   Boolean     @default(false)
  clientWatermark Boolean     @default(false)
  
  createdAt       DateTime    @default(now())

  @@index([clientId])
  @@index([roomId])
  @@index([category])
  @@map("documents")
}

enum DocCategory { 
  DRAWING 
  SURVEY_PACK 
  PRODUCT_LIST 
  CONTRACT 
  PHOTO 
  CERTIFICATE 
  RENDER 
  OTHER 
}

model DesignVersion {
  id            String  @id @default(cuid())
  clientId      String
  roomId        String
  room          Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  version       Int
  notes         String?
  assets        Json    // list of Document ids or URLs (renders/plans)
  finalApproved Boolean @default(false)
  
  createdAt     DateTime @default(now())

  @@unique([roomId, version])
  @@map("design_versions")
}

model ParsedSpecItem {
  id          String     @id @default(cuid())
  clientId    String
  roomId      String
  room        Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  specVersion Int
  lineNo      Int
  brand       String?
  description String
  finish      String?
  qty         Float?
  unitPrice   Int?       // in pence
  totalPrice  Int?
  status      SpecStatus @default(PENDING)
  note        String?
  isCritical  Boolean    @default(false)
  
  createdAt   DateTime   @default(now())

  @@index([clientId, roomId, specVersion])
  @@map("parsed_spec_items")
}

enum SpecStatus { 
  PENDING 
  ORDERED 
  DELIVERED 
  ONSITE 
}

model Snag {
  id            String     @id @default(cuid())
  clientId      String
  roomId        String
  room          Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  title         String
  description   String?
  status        SnagStatus @default(OPEN)
  assigneeId    String?
  dueAt         DateTime?
  clientVisible Boolean    @default(false)
  photos        Json?
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([clientId, status])
  @@index([roomId, status])
  @@map("snags")
}

enum SnagStatus { 
  OPEN 
  RESOLVED 
}

model Job {
  id          String   @id @default(cuid())
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roomId      String?
  room        Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  title       String
  description String?
  status      JobStatus @default(SCHEDULED)
  startDate   DateTime?
  endDate     DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
  @@index([roomId])
  @@index([status])
  @@map("jobs")
}

enum JobStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model FormSubmission {
  id         String   @id @default(cuid())
  clientId   String
  roomId     String?
  room       Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  formType   String
  data       Json
  submittedAt DateTime @default(now())

  @@index([clientId])
  @@index([roomId])
  @@map("form_submissions")
}

model EventLog {
  id        String   @id @default(cuid())
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  roomId    String?
  actorId   String?
  entity    String
  entityId  String
  action    String
  before    Json?
  after     Json?
  
  createdAt DateTime @default(now())

  @@index([clientId, createdAt])
  @@index([roomId, createdAt])
  @@map("event_logs")
}

// Additional models for comprehensive CRM functionality

model Lead {
  id                String     @id @default(cuid())
  title             String
  description       String?
  status            LeadStatus @default(NEW)
  priority          Priority   @default(MEDIUM)
  estimatedValue    Decimal?   @db.Decimal(10,2)
  probability       Int        @default(50)
  expectedCloseDate DateTime?
  source            String?
  campaign          String?
  medium            String?
  firstResponseAt   DateTime?
  responseTime      Int?
  
  clientId          String
  client            Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ownerId           String
  owner             User       @relation(fields: [ownerId], references: [id])
  
  dealId            String?    @unique
  deal              Deal?      @relation(fields: [dealId], references: [id])
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  createdById       String?
  updatedById       String?

  @@map("leads")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  WON
  LOST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Extensions for PostgreSQL
generator prismaExtensions {
  provider = "prisma-extension-pg"
  features = ["trigram"]
}
