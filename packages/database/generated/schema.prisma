generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(cuid())
  email                  String             @unique
  passwordHash           String?
  firstName              String
  lastName               String
  phone                  String?
  role                   UserRole           @default(SALES)
  isActive               Boolean            @default(true)
  lastLoginAt            DateTime?
  emailVerifiedAt        DateTime?
  twoFactorSecret        String?
  twoFactorEnabled       Boolean            @default(false)
  avatarUrl              String?
  timezone               String             @default("Europe/London")
  preferences            Json               @default("{}")
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  createdById            String?
  updatedById            String?
  ownedAccounts          Account[]          @relation("AccountOwner")
  activities             Activity[]
  ownedCompletedProjects CompletedProject[] @relation("CompletedProjectOwner")
  ownedEnquiries         Enquiry[]          @relation("EnquiryOwner")
  ownedLeads             Lead[]             @relation("LeadOwner")
  ownedProjects          Project[]          @relation("ProjectOwner")
  assignedTasks          Task[]             @relation("TaskAssignee")
  createdBy              User?              @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers           User[]             @relation("UserCreatedBy")
  updatedBy              User?              @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedUsers           User[]             @relation("UserUpdatedBy")

  // Workflow Engine relations
  createdWorkflows   WorkflowDefinition[]    @relation("WorkflowCreatedBy")
  initiatedWorkflows WorkflowInstance[]      @relation("WorkflowInitiatedBy")
  assignedSteps      WorkflowStepExecution[] @relation("WorkflowStepAssigned")
  approverSteps      WorkflowStepApprover[]  @relation("WorkflowApprover")
  approvals          WorkflowApproval[]      @relation("WorkflowApprovalUser")
  createdTemplates   WorkflowTemplate[]      @relation("WorkflowTemplateCreator")
  createdRules       AutomationRule[]        @relation("AutomationRuleCreator")

  // QA System relations
  createdTestPlans  TestPlan[]      @relation("TestPlanCreator")
  assignedTestPlans TestPlan[]      @relation("TestPlanAssignee")
  createdTestCases  TestCase[]      @relation("TestCaseCreator")
  testExecutions    TestExecution[] @relation("TestExecutor")
  reportedDefects   Defect[]        @relation("DefectReporter")
  assignedDefects   Defect[]        @relation("DefectAssignee")
  qaReviews         QAReview[]      @relation("QAReviewer")

  @@map("users")
}

model Account {
  id                String             @id @default(cuid())
  orgId             String?
  name              String
  legalName         String?
  emails            String[]
  phones            String[]
  billingAddress    Json?
  siteAddresses     Json?
  ownerId           String
  tags              String[]
  status            AccountStatus      @default(ACTIVE)
  portalToken       String             @unique @default(cuid())
  designFeePaid     Boolean            @default(false)
  consentMarketing  Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  createdById       String?
  updatedById       String?
  owner             User               @relation("AccountOwner", fields: [ownerId], references: [id])
  activities        Activity[]
  appointments      Appointment[]
  completedProjects CompletedProject[]
  contacts          Contact[]
  documents         Document[]
  enquiries         Enquiry[]
  events            EventLog[]
  leads             Lead[]
  projects          Project[]
  snags             Snag[]
  tasks             Task[]

  // Workflow Engine relations
  workflows         WorkflowDefinition[]
  workflowInstances WorkflowInstance[]
  workflowTemplates WorkflowTemplate[]
  automationRules   AutomationRule[]

  @@index([name])
  @@index([ownerId])
  @@index([status])
  @@index([portalToken])
  @@map("accounts")
}

model Enquiry {
  id             String        @id @default(cuid())
  title          String
  description    String?
  status         EnquiryStatus @default(NEW)
  priority       Priority      @default(MEDIUM)
  source         String?
  campaign       String?
  medium         String?
  estimatedValue Decimal?      @db.Decimal(10, 2)
  contactMethod  String?
  firstName      String
  lastName       String
  email          String?
  phone          String?
  mobile         String?
  company        String?
  message        String?
  accountId      String?
  ownerId        String
  leadId         String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdById    String?
  updatedById    String?
  activities     Activity[]
  account        Account?      @relation(fields: [accountId], references: [id])
  owner          User          @relation("EnquiryOwner", fields: [ownerId], references: [id])
  lead           Lead?         @relation("EnquiryLead")
  tasks          Task[]

  @@map("enquiries")
}

model Contact {
  id        String   @id @default(cuid())
  accountId String
  name      String
  role      String?
  email     String?
  phone     String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([email])
  @@index([phone])
  @@map("contacts")
}

model Lead {
  id                String     @id @default(cuid())
  title             String
  description       String?
  status            LeadStatus @default(NEW)
  priority          Priority   @default(MEDIUM)
  estimatedValue    Decimal?   @db.Decimal(10, 2)
  probability       Int        @default(50)
  expectedCloseDate DateTime?
  source            String?
  campaign          String?
  medium            String?
  firstResponseAt   DateTime?
  responseTime      Int?
  accountId         String
  ownerId           String
  enquiryId         String?    @unique
  projectId         String?    @unique
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  createdById       String?
  updatedById       String?
  activities        Activity[]
  account           Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  enquiry           Enquiry?   @relation("EnquiryLead", fields: [enquiryId], references: [id])
  owner             User       @relation("LeadOwner", fields: [ownerId], references: [id])
  project           Project?   @relation("LeadProject")
  tasks             Task[]

  @@map("leads")
}

model Project {
  id                 String            @id @default(cuid())
  title              String
  description        String?
  type               ProjectType       @default(OTHER)
  status             ProjectStatus     @default(PLANNING)
  accountId          String
  ownerId            String
  amountGrossIncVat  Int
  vatRate            Float             @default(0.2)
  probability        Int               @default(50)
  source             String?
  utm                Json?
  leadId             String?           @unique
  completedProjectId String?           @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  activities         Activity[]
  appointments       Appointment[]
  completedProject   CompletedProject? @relation("ProjectCompleted")
  documents          Document[]
  account            Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  lead               Lead?             @relation("LeadProject", fields: [leadId], references: [id])
  owner              User              @relation("ProjectOwner", fields: [ownerId], references: [id])
  snags              Snag[]
  tasks              Task[]

  @@index([accountId])
  @@index([ownerId])
  @@index([status])
  @@map("projects")
}

model CompletedProject {
  id          String                 @id @default(cuid())
  accountId   String
  projectId   String?                @unique
  ownerId     String
  title       String
  description String?
  status      CompletedProjectStatus @default(SCHEDULED)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  account     Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  owner       User                   @relation("CompletedProjectOwner", fields: [ownerId], references: [id])
  project     Project?               @relation("ProjectCompleted", fields: [projectId], references: [id])

  @@index([accountId])
  @@index([status])
  @@map("completed_projects")
}

model Activity {
  id          String       @id @default(cuid())
  accountId   String
  enquiryId   String?
  leadId      String?
  projectId   String?
  userId      String?
  type        ActivityType
  threadKey   String?
  summary     String?
  body        String?
  attachments Json?
  durations   Json?
  metadata    Json?
  occurredAt  DateTime     @default(now())
  createdAt   DateTime     @default(now())
  account     Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  enquiry     Enquiry?     @relation(fields: [enquiryId], references: [id], onDelete: Cascade)
  lead        Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User?        @relation(fields: [userId], references: [id])

  @@index([accountId, occurredAt])
  @@index([threadKey])
  @@map("activities")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(OPEN)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  assigneeId  String
  accountId   String
  enquiryId   String?
  leadId      String?
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  account     Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  assignee    User       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  enquiry     Enquiry?   @relation(fields: [enquiryId], references: [id], onDelete: Cascade)
  lead        Lead?      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

model Appointment {
  id          String            @id @default(cuid())
  accountId   String
  projectId   String?
  title       String
  description String?
  type        AppointmentType
  startTime   DateTime
  endTime     DateTime
  location    String?
  status      AppointmentStatus @default(SCHEDULED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  account     Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  project     Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([projectId])
  @@index([startTime])
  @@map("appointments")
}

model Document {
  id         String       @id @default(cuid())
  accountId  String
  projectId  String?
  filename   String
  fileUrl    String
  fileSize   Int?
  mimeType   String?
  type       DocumentType @default(OTHER)
  uploadedBy String?
  createdAt  DateTime     @default(now())
  account    Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  project    Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([projectId])
  @@index([type])
  @@map("documents")
}

model Snag {
  id          String     @id @default(cuid())
  accountId   String
  projectId   String
  title       String
  description String
  status      SnagStatus @default(OPEN)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  dueAt       DateTime?
  photos      Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  account     Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([projectId])
  @@index([status])
  @@map("snags")
}

model EventLog {
  id        String   @id @default(cuid())
  accountId String?
  actorId   String?
  entity    String
  entityId  String
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId, createdAt])
  @@map("event_logs")
}

enum UserRole {
  ADMIN
  MANAGER
  SALES
  DESIGNER
  INSTALLER
  FINANCE
}

enum AccountStatus {
  ACTIVE
  ARCHIVED
}

enum EnquiryStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  REJECTED
  NURTURING
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  WON
  LOST
}

enum ProjectType {
  KITCHEN
  BATHROOM
  CLOAKROOM
  ENSUITE
  WET_ROOM
  OTHER
}

enum ProjectStatus {
  PLANNING
  DESIGN
  QUOTED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum CompletedProjectStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  NOTE
  CALL
  EMAIL
  SMS
  MEETING
  VOICEMAIL
  SIGNATURE
  UPLOAD
  FORM
  SYSTEM
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  DONE
  CANCELLED
}

enum AppointmentType {
  DESIGN_CONSULTATION
  SITE_SURVEY
  DESIGN_PRESENTATION
  CONTRACT_SIGNING
  INSTALL_START
  PROGRESS_CHECK
  HANDOVER
  AFTERCARE
  FOLLOW_UP
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum DocumentType {
  DESIGN_DRAWING
  TECHNICAL_DRAWING
  SITE_SURVEY
  PRODUCT_SPECIFICATION
  QUOTATION
  CONTRACT
  INVOICE
  PHOTO_BEFORE
  PHOTO_PROGRESS
  PHOTO_COMPLETION
  CERTIFICATE
  WARRANTY
  RENDER_3D
  FLOOR_PLAN
  OTHER
}

enum SnagStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Advanced Workflow Engine Models
model WorkflowDefinition {
  id                String              @id @default(cuid())
  name              String
  description       String?
  version           Int                 @default(1)
  isActive          Boolean             @default(true)
  triggerType       WorkflowTriggerType
  triggerConditions Json // Conditions that start the workflow
  accountId         String
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  account   Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdBy User               @relation("WorkflowCreatedBy", fields: [createdById], references: [id])
  steps     WorkflowStep[]
  instances WorkflowInstance[]
  templates WorkflowTemplate[]

  @@map("workflow_definitions")
}

model WorkflowStep {
  id             String           @id @default(cuid())
  workflowId     String
  name           String
  description    String?
  stepType       WorkflowStepType
  position       Int // Order in workflow
  configuration  Json // Step-specific configuration
  conditions     Json? // Conditions for step execution
  isRequired     Boolean          @default(true)
  timeoutMinutes Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  workflow   WorkflowDefinition      @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executions WorkflowStepExecution[]
  approvers  WorkflowStepApprover[]

  @@map("workflow_steps")
}

model WorkflowStepApprover {
  id           String       @id @default(cuid())
  stepId       String
  userId       String
  approverType ApproverType
  isRequired   Boolean      @default(true)
  order        Int          @default(1)
  createdAt    DateTime     @default(now())

  // Relations
  step      WorkflowStep       @relation(fields: [stepId], references: [id], onDelete: Cascade)
  user      User               @relation("WorkflowApprover", fields: [userId], references: [id])
  approvals WorkflowApproval[]

  @@unique([stepId, userId])
  @@map("workflow_step_approvers")
}

model WorkflowInstance {
  id            String         @id @default(cuid())
  workflowId    String
  entityType    String // e.g., "Enquiry", "Project", "Quote"
  entityId      String
  status        WorkflowStatus
  currentStepId String?
  priority      Priority       @default(MEDIUM)
  startedAt     DateTime       @default(now())
  completedAt   DateTime?
  errorMessage  String?
  metadata      Json? // Additional context data
  accountId     String
  initiatedById String

  // Relations
  workflow    WorkflowDefinition      @relation(fields: [workflowId], references: [id])
  account     Account                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  initiatedBy User                    @relation("WorkflowInitiatedBy", fields: [initiatedById], references: [id])
  executions  WorkflowStepExecution[]
  approvals   WorkflowApproval[]

  @@map("workflow_instances")
}

model WorkflowStepExecution {
  id           String             @id @default(cuid())
  instanceId   String
  stepId       String
  status       WorkflowStepStatus
  startedAt    DateTime           @default(now())
  completedAt  DateTime?
  assignedToId String?
  result       Json? // Execution result data
  errorMessage String?
  retryCount   Int                @default(0)
  isManual     Boolean            @default(false)

  // Relations
  instance   WorkflowInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  step       WorkflowStep     @relation(fields: [stepId], references: [id])
  assignedTo User?            @relation("WorkflowStepAssigned", fields: [assignedToId], references: [id])

  @@map("workflow_step_executions")
}

model WorkflowApproval {
  id             String         @id @default(cuid())
  instanceId     String
  approverId     String
  stepApproverId String
  status         ApprovalStatus
  comments       String?
  approvedAt     DateTime?
  rejectedAt     DateTime?
  requestedAt    DateTime       @default(now())
  remindersSent  Int            @default(0)
  lastReminderAt DateTime?

  // Relations
  instance     WorkflowInstance     @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  approver     User                 @relation("WorkflowApprovalUser", fields: [approverId], references: [id])
  stepApprover WorkflowStepApprover @relation(fields: [stepApproverId], references: [id])

  @@map("workflow_approvals")
}

model WorkflowTemplate {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String // e.g., "Sales", "Installation", "Quality"
  industry     String   @default("BATHROOM_FITTING")
  templateData Json // Complete workflow definition template
  isPublic     Boolean  @default(false)
  usageCount   Int      @default(0)
  rating       Float?
  accountId    String?
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  account    Account?            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdBy  User                @relation("WorkflowTemplateCreator", fields: [createdById], references: [id])
  workflow   WorkflowDefinition? @relation(fields: [workflowId], references: [id])
  workflowId String?

  @@map("workflow_templates")
}

model AutomationRule {
  id             String    @id @default(cuid())
  name           String
  description    String?
  triggerEvent   String // Event that triggers the rule
  conditions     Json // Conditions to check
  actions        Json // Actions to execute
  isActive       Boolean   @default(true)
  priority       Int       @default(1)
  executionCount Int       @default(0)
  lastExecutedAt DateTime?
  accountId      String
  createdById    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  account    Account               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdBy  User                  @relation("AutomationRuleCreator", fields: [createdById], references: [id])
  executions AutomationExecution[]

  @@map("automation_rules")
}

model AutomationExecution {
  id           String           @id @default(cuid())
  ruleId       String
  triggerData  Json // Data that triggered the execution
  result       Json? // Execution result
  status       AutomationStatus
  errorMessage String?
  executedAt   DateTime         @default(now())
  durationMs   Int?

  // Relations
  rule AutomationRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@map("automation_executions")
}

// Add relations to existing models
// Workflow Engine Enums
enum WorkflowTriggerType {
  MANUAL // User-initiated
  AUTOMATIC // Event-triggered
  SCHEDULED // Time-based
  CONDITIONAL // Based on conditions
}

enum WorkflowStepType {
  APPROVAL // Requires approval from users
  TASK // Assigns task to user
  NOTIFICATION // Sends notification
  EMAIL // Sends email
  SMS // Sends SMS
  WEBHOOK // Calls external API
  DATA_UPDATE // Updates data
  WAIT // Waits for time/condition
  DECISION // Conditional branching
  SCRIPT // Executes custom script
}

enum WorkflowStatus {
  PENDING
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

enum WorkflowStepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
  CANCELLED
}

enum ApproverType {
  REQUIRED // Must approve
  OPTIONAL // Can approve
  INFORMATIONAL // Just notified
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum AutomationStatus {
  SUCCESS
  FAILED
  PARTIAL
}

// QA System Enums
enum TestPlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum TestCaseStatus {
  DRAFT
  ACTIVE
  DEPRECATED
}

enum TestCasePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TestExecutionStatus {
  NOT_STARTED
  IN_PROGRESS
  PASSED
  FAILED
  BLOCKED
  SKIPPED
}

enum DefectSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  BLOCKER
}

enum DefectStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
  REJECTED
}

enum DefectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum QAReviewStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  NEEDS_REVISION
}

// QA System Models
model TestPlan {
  id           String         @id @default(cuid())
  name         String
  description  String?
  version      String         @default("1.0")
  status       TestPlanStatus @default(DRAFT)
  projectId    String?
  feature      String?
  environment  String?
  startDate    DateTime?
  endDate      DateTime?
  createdBy    User           @relation("TestPlanCreator", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?          @relation("TestPlanAssignee", fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  testCases  TestCase[]
  executions TestExecution[]
  reviews    QAReview[]

  @@map("test_plans")
}

model TestCase {
  id             String           @id @default(cuid())
  title          String
  description    String?
  preconditions  String?
  steps          Json // Array of test steps
  expectedResult String?
  priority       TestCasePriority @default(MEDIUM)
  status         TestCaseStatus   @default(ACTIVE)
  tags           String[]
  automatable    Boolean          @default(false)
  estimatedTime  Int? // in minutes
  testPlan       TestPlan         @relation(fields: [testPlanId], references: [id], onDelete: Cascade)
  testPlanId     String
  createdBy      User             @relation("TestCaseCreator", fields: [createdById], references: [id])
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  executions TestExecution[]
  defects    DefectTestCase[]

  @@map("test_cases")
}

model TestExecution {
  id             String              @id @default(cuid())
  testPlan       TestPlan            @relation(fields: [testPlanId], references: [id], onDelete: Cascade)
  testPlanId     String
  testCase       TestCase            @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  testCaseId     String
  status         TestExecutionStatus @default(NOT_STARTED)
  result         String? // Detailed result/notes
  actualResult   String?
  evidence       Json? // Screenshots, logs, etc.
  executionTime  Int? // in minutes
  environment    String?
  browserVersion String?
  osVersion      String?
  notes          String?
  executedBy     User                @relation("TestExecutor", fields: [executedById], references: [id])
  executedById   String
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relations
  defects Defect[]

  @@map("test_executions")
}

model Defect {
  id               String         @id @default(cuid())
  title            String
  description      String
  steps            String? // Steps to reproduce
  expectedBehavior String?
  actualBehavior   String?
  severity         DefectSeverity @default(MEDIUM)
  priority         DefectPriority @default(MEDIUM)
  status           DefectStatus   @default(OPEN)
  environment      String?
  browserVersion   String?
  osVersion        String?
  attachments      Json? // File URLs/paths
  reproducible     Boolean        @default(true)
  regression       Boolean        @default(false)
  testExecution    TestExecution? @relation(fields: [testExecutionId], references: [id])
  testExecutionId  String?
  reportedBy       User           @relation("DefectReporter", fields: [reportedById], references: [id])
  reportedById     String
  assignedTo       User?          @relation("DefectAssignee", fields: [assignedToId], references: [id])
  assignedToId     String?
  reportedAt       DateTime       @default(now())
  resolvedAt       DateTime?
  closedAt         DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  testCases DefectTestCase[]
  comments  DefectComment[]

  @@map("defects")
}

model DefectTestCase {
  id         String   @id @default(cuid())
  defect     Defect   @relation(fields: [defectId], references: [id], onDelete: Cascade)
  defectId   String
  testCase   TestCase @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  testCaseId String
  createdAt  DateTime @default(now())

  @@unique([defectId, testCaseId])
  @@map("defect_test_cases")
}

model DefectComment {
  id         String   @id @default(cuid())
  content    String
  defect     Defect   @relation(fields: [defectId], references: [id], onDelete: Cascade)
  defectId   String
  authorId   String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("defect_comments")
}

model QAReview {
  id              String         @id @default(cuid())
  title           String
  description     String?
  type            String // "Test Plan", "Test Execution", "Defect", "Release"
  entityId        String // ID of the entity being reviewed
  status          QAReviewStatus @default(PENDING)
  criteria        Json? // Review criteria/checklist
  findings        String?
  recommendations String?
  approved        Boolean?
  testPlan        TestPlan?      @relation(fields: [testPlanId], references: [id])
  testPlanId      String?
  reviewer        User           @relation("QAReviewer", fields: [reviewerId], references: [id])
  reviewerId      String
  reviewedAt      DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("qa_reviews")
}
