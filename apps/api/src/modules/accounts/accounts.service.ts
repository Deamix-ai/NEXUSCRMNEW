import { Injectable, ConflictException, BadRequestException, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../database/prisma.service';
import { CreateAccountDto, UpdateAccountDto, AccountStatus } from './dto/account.dto';
import { Prisma } from '@crm/database/generated';

@Injectable()
export class AccountsService {
  constructor(private prisma: PrismaService) {}

  async create(createAccountDto: CreateAccountDto) {
    // Check for potential duplicates by name
    const existingAccount = await this.prisma.account.findFirst({
      where: {
        name: createAccountDto.name,
      },
    });

    if (existingAccount) {
      throw new ConflictException('Account with this name already exists');
    }

    // Provide default system user if no ownerId specified
    let ownerId = createAccountDto.ownerId;
    if (!ownerId) {
      // Try to find the first system user, or create a default system account
      const systemUser = await this.prisma.user.findFirst({
        orderBy: { createdAt: 'asc' }
      });
      
      if (systemUser) {
        ownerId = systemUser.id;
      } else {
        throw new BadRequestException('No system user available. Please provide an ownerId or ensure at least one user exists.');
      }
    } else {
      // Verify the provided user exists
      const user = await this.prisma.user.findUnique({
        where: { id: ownerId }
      });
      
      if (!user) {
        throw new NotFoundException(`User with ID ${ownerId} not found`);
      }
    }
    
    return this.prisma.account.create({
      data: {
        ...createAccountDto,
        ownerId,
        portalToken: undefined, // Will be auto-generated by Prisma
        emails: createAccountDto.emails || [],
        phones: createAccountDto.phones || [],
        tags: createAccountDto.tags || [],
        status: createAccountDto.status || 'ACTIVE',
        designFeePaid: createAccountDto.designFeePaid || false,
        consentMarketing: createAccountDto.consentMarketing || false,
      },
      include: {
        owner: true,
        contacts: true,
      },
    });
  }

  async findAll(query?: {
    status?: AccountStatus;
    ownerId?: string;
    search?: string;
    page?: number;
    limit?: number;
  }) {
    const where: Prisma.AccountWhereInput = {};
    
    if (query?.status) {
      where.status = query.status;
    }
    
    if (query?.ownerId) {
      where.ownerId = query.ownerId;
    }
    
    if (query?.search) {
      where.OR = [
        { name: { contains: query.search, mode: 'insensitive' } },
        { legalName: { contains: query.search, mode: 'insensitive' } },
        { emails: { has: query.search } },
        { phones: { has: query.search } },
      ];
    }

    const page = query?.page || 1;
    const limit = query?.limit || 50;
    const skip = (page - 1) * limit;

    const [accounts, total] = await Promise.all([
      this.prisma.account.findMany({
        where,
        include: {
          owner: true,
          contacts: true,
          _count: {
            select: {
              enquiries: true,
              leads: true,
              projects: true,
            },
          },
        },
        skip,
        take: limit,
        orderBy: { name: 'asc' },
      }),
      this.prisma.account.count({ where }),
    ]);

    return {
      data: accounts,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit),
        hasNext: page * limit < total,
        hasPrev: page > 1,
      },
    };
  }

  async findOne(id: string) {
    return this.prisma.account.findUnique({
      where: { id },
      include: {
        owner: true,
        contacts: true,
        enquiries: {
          orderBy: { createdAt: 'desc' },
          take: 10,
        },
        leads: {
          orderBy: { createdAt: 'desc' },
          take: 10,
        },
        projects: {
          orderBy: { createdAt: 'desc' },
          take: 10,
        },
        activities: {
          orderBy: { occurredAt: 'desc' },
          take: 20,
        },
      },
    });
  }

  async update(id: string, updateAccountDto: UpdateAccountDto) {
    return this.prisma.account.update({
      where: { id },
      data: updateAccountDto,
      include: {
        owner: true,
        contacts: true,
      },
    });
  }

  async remove(id: string) {
    return this.prisma.account.update({
      where: { id },
      data: {
        deletedAt: new Date(),
        status: 'ARCHIVED',
      },
    });
  }

  async getStats(userId?: string) {
    const where: Prisma.AccountWhereInput = userId ? { ownerId: userId } : {};

    const [total, active, archived] = await Promise.all([
      this.prisma.account.count({ where }),
      this.prisma.account.count({ where: { ...where, status: 'ACTIVE' } }),
      this.prisma.account.count({ where: { ...where, status: 'ARCHIVED' } }),
    ]);

    return {
      total,
      active,
      archived,
    };
  }
}
